# Define stages
stages:
  - install
  - test
  - build
  - analyse
  - deploy

variables:
  GIT_DEPTH: 0
  DOCKER_IMAGE: 'build-univlausanne-bgee'
  DOCKER_CONTAINER: 'UnivLausanne-BGEE'
  DOCKER_PORT: 35100

# Caching node_modules between jobs
cache:
  paths:
    - node_modules

# Install
install:
  stage: install
  image: node:16
  script:
    - echo "Install the app ..."
    - yarn install
    - echo "Install successfull !"
  only:
    - merge_requests
    - develop
    - master

# Test front Jest
#test-front-jest:
#  stage: test
#  image: node:16
#  script:
#    - echo "ls -la :"
#    - ls -la
#    - echo "Testing the app ..."
#    - yarn run test
#    - echo "Test successfully!"
#  only:
#    - merge_requests
#    - develop
#    - master
# Makes tests visible from gitlab pipelines !
#artifacts:
#  when: always
#  expire_in: 1 hour
#  reports:
#    junit:
#      - junit.xml
#  # Save reports for sonar analysis
#  paths:
#    - test-report.xml
#    - coverage/lcov.info

build:
  stage: build
  image: node:16
  script:
    - echo "Building the app ..."
    - echo $CI_COMMIT_BRANCH
    - yarn run build
    - echo "Build successfull !"
    - echo "Creating artifact of build/"
  artifacts:
    expire_in: 4 hour
    paths:
      - build
  only:
    - merge_requests
    - develop
    - master

# Sonar analysis
sonarqube-check:
  stage: analyse
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: ['']
  script:
    - sonar-scanner -Dsonar.qualitygate.wait=true
  allow_failure: false
  only:
    - merge_requests
    - develop
    - master

# deploy branch env
docker-deploy:
  image: docker:stable
  stage: deploy
  script:
    - docker -H $DOCKER_HOST ps -f name=$DOCKER_CONTAINER -q | xargs --no-run-if-empty docker container stop
    - docker -H $DOCKER_HOST container ls -a -fname=$DOCKER_CONTAINER -q | xargs -r docker container rm
    - docker -H $DOCKER_HOST build . -t $DOCKER_IMAGE
    - docker -H $DOCKER_HOST run -d -p ${DOCKER_PORT}:80 --name $DOCKER_CONTAINER $DOCKER_IMAGE
  needs:
    - build
  rules:
    - if: ($CI_COMMIT_BRANCH =~ /^sprint.*/i && $CI_PIPELINE_SOURCE == 'merge_request_event') || $CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH == "master"
      when: on_success
    # --> comme si on avait if(true)
    # Permet de toujours pouvoir lancer le build manuellement si n√©cessaire
    - if: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
      when: manual
      allow_failure: true
